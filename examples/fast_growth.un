# This program defines fast-growing functions within token constraints.
# 
# More specifically, given an integer n >= 0, let U_n be the set of all Unarian
# programs that include a `main` function and can be written with at most n + 3
# tokens (we include 3 extra tokens for defining `main`). Then let F(n) be the
# maximum among all terminating programs in U_n of the value produced by that
# program on input 0.
# 
# This program contains known lower-bounds of F(n) and the programs that achieve
# those lower-bounds. The first few are easily seen to be tight. They are also
# categorized into 'regimes' based on the construction method used. For example,
# the multiplication regime contains the first functions that multiply their
# inputs by a constant. This operation is then chained together to obtain large
# numbers.
# 
# This is related to the Busy-Beaver function BB(n). See the Wikipedia page for
# more https://en.wikipedia.org/wiki/Busy_beaver. Specifically, since Unarian is
# Turing complete and there exists sufficiently large n to represent any
# computable function with at most n + 3 tokens, then it appears that F(n) must
# be an uncomputable function. However, until there are enough tokens to write
# functions that encode complex Turing machines, the function F(n) will grow at
# a rate closer to that of the fast-growing hierarchy:
# https://en.wikipedia.org/wiki/Fast-growing_hierarchy.
# 
# Note: This file contains repeated definitions for certain functions that are
# reused in different lower bound programs. Therefore, it may not compile in
# some implementations. However, every definition of a particular function
# should be identical, so it's safe to remove the duplicates.
# 
# Note: Exponentiation is intended to be interpreted as right associative to
# make towers of exponentials easier to read (i.e. a ^ b ^ c = a ^ (b ^ c)).
# Additionally, Knuth's up-arrow notation may be used to write higher-order
# operators that grow faster than exponentiation. For more, see the Wikipedia
# page https://en.wikipedia.org/wiki/Knuth%27s_up-arrow_notation

#=======================#
# Incrementation Regime #
#=======================#

# F(0) = 0
main0 { }

# F(1) = 1
main1 { + }

# F(2) = 2
main2 { + + }

# F(3) = 3
main3 { + + + }

# F(4) = 4
main4 { + + + + }

# F(5) = 5
main5 { + + + + + }

# F(6) = 6
main6 { + + + + + + }

# F(7) >= 7
main7 { + + + + + + + }

# F(8) >= 8
main8 { + + + + + + + + }

# F(9) >= 9
main9 { + + + + + + + + + }

#=================#
# Addition Regime #
#=================#

# F(10) >= 3 + 3 + 3 + 3
#        = 12
+3 { + + + }
main10 { +3 +3 +3 +3 }

# F(11) >= 4 + 4 + 4 + 4
#        = 16
+4 { + + + + }
main11 { +4 +4 +4 +4 }

# F(12) >= 4 + 4 + 4 + 4 + 4
#        = 20
+4 { + + + + }
main12 { +4 +4 +4 +4 +4 }

#=======================#
# Multiplication Regime #
#=======================#

# F(13) >= 3 * 3 * 3
#        = 27
*3 { - *3 + + + | }
main13 { + *3 *3 *3 }

# F(14) >= 3 * 3 * 3 * 3
#        = 81
*3 { - *3 + + + | }
main14 { + *3 *3 *3 *3 }

# F(15) >= 4 * 4 * 4 * 4
#        = 256
*4 { - *4 + + + + | }
main15 { + *4 *4 *4 *4 }

# F(16) >= 4 * 4 * 4 * 4 * 4
#        = 1024
*4 { - *4 + + + + | }
main16 { + *4 *4 *4 *4 *4 }

# F(17) >= 4 * 4 * 4 * 4 * 4 * 4
#        = 4096
*4 { - *4 + + + + | }
main17 { + *4 *4 *4 *4 *4 *4 }

# F(18) >= 4 * 4 * 4 * 4 * 4 * 4 * 4
#        = 16384
*4 { - *4 + + + + | }
main18 { + *4 *4 *4 *4 *4 *4 *4 }

# F(19) >= 5 * 5 * 5 * 5 * 5 * 5 * 5
#        = 78125
*5 { - *5 + + + + + | }
main19 { + *5 *5 *5 *5 *5 *5 *5 }

# F(20) >= 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5
#        = 390625
*5 { - *5 + + + + + | }
main20 { + *5 *5 *5 *5 *5 *5 *5 *5 }

#=======================#
# Exponentiation Regime #
#=======================#

# F(21) >= 4 ^ 4 ^ 4
#        = 13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084096
#       >= 10 ^ 154
*2 { - *2 + + | }
4^ { - 4^ *2 *2 | + }
main21 { + 4^ 4^ 4^ }

# F(22) >= 4 ^ 4 ^ 4 ^ 4
#       >= 10 ^ 10 ^ 153
*2 { - *2 + + | }
4^ { - 4^ *2 *2 | + }
main22 { + 4^ 4^ 4^ 4^ }

# F(23) >= 4 ^ 4 ^ 4 ^ 4 ^ 4
#       >= 10 ^ 10 ^ 10 ^ 153
*2 { - *2 + + | }
4^ { - 4^ *2 *2 | + }
main23 { + 4^ 4^ 4^ 4^ 4^ }

# F(24) >= 4 ^ 4 ^ 4 ^ 4 ^ 4 ^ 4
#       >= 10 ^ 10 ^ 10 ^ 10 ^ 153
*2 { - *2 + + | }
4^ { - 4^ *2 *2 | + }
main24 { + 4^ 4^ 4^ 4^ 4^ 4^ }
